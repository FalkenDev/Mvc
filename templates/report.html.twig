{# templates/report.html.twig #}
{% include "inc/header.html.twig" %}
<body>
    <section class="report">
        <h1>Redovisningstexter för kursens kursmoment</h1>
        <h2>Kmom01</h2>

        <p>Minna tidigare erfarenheter av objektorientering är från kursen OOPython där vi lärde oss
        om att skapa klasser, arv med mer. Jag har även förkunskaper om objektorientering i gymnasiet
        där vi hade 2 programmeringskurser inom C++ i min inriktning.</p>

        <p>De grunderna man behöver veta om PHPs modell för klasser och objekt är att i objekt så finns
        det både mutable och immutable objekt. Med mutable objekt kan man förändra sin struktur under sin
        levnadstid medan inmutable så kan man inte ändra eller ta bort något alltså motsatsen till mutable.
        Man behöver också veta om piloperatorer som gör att man accessar ett objekts properties eller medlemmar.
        Även att alla objekt är publika om man inte inkapslar det med klasser.  </p>

        <p>Grunderna att veta om klasser är att $this är en referns till nuvarande objekt och används i klassens
        metoder för att referera de objekt som anropar metoden. Även behöver man veta om att funktioner som ligger
        som medlemmar i en klass är metoder och att properties variabler i en klass kan man kalla för medlemsvariabler.</p>

        <p>Jag uppfattar den som relativt enkelt när man har lärt sig mer om det. Det var svårt att förstå i början men
        när man fick lite mer klarheter så lättnade de till.</p>

        <p>Några delar jag känner extra intressant i artikeln ”PHP The Right Way” är MySQL extension då vi har arbetat
        med databaser i förra kursen och känner då hade varit kul att veta mer om det. Något mer som jag blev intresserade
        av är Design Patterns. Att lära sig mer om vilka design mönster som är bra att använda för att göra det både lättare
        att kunna hantera sin egen kod men också för andra utvecklare att förstå koden och hantera den när man väll ska jobba
        eller utveckla ett program med någon annan. Exceptions intresserar mig också då detta är väldigt viktigt att lyfta fram
        problem och misstag som man får när man kör sitt program. Att veta mer om detta hade varit kul då detta underlättar vad
        för misstag man gör och kan korrigera dom lättare.</p>

        <p>Mitt TIL för detta kursmoment är hur man skapar template filer såsom med twig även har jag lärt mig mer om hur man skapar Controllers.</p>

        <h2>Kmom02</h2>
        <p>Arv är att den ärver en annans klass saker / beteende men går att modifieras med sina egna funktioner utan att det påverkar klassen som den ärver.</p>
        <p>Interface definierar vad som behöver finnas i funktionen som till exempel rätt namn och typ. Detta gör inte mycket mer än att säga till om man har skrivit något fel eller returnerar fel typ värde</p>
        <p>Trait är typ som arv då den har en relation till någon annan klass men klassen är inte en relation till en annan klass som arv har.  Man kan använda klassens metoder och använda de i sin egen klass utan att det påverkar klassens som ärvs.</p>
        <p>Komposition är att till exempel en klass är beroende av en annan klass. Om den klassen som den andra klassen är beroende utav tas bort så funkar inte klassen.</p>
        <p>Jag försökte hålla det så simpelt som möjligt med mina implementationer. Jag började att göra en klass för kortleken och en klass för varje kort. I kort konstruktorn så gav jag specifika kortet värde och vad för färg det är. I kortlekskonstruktorn skapade jag hela kortleken med att loopa igenom färgen och i den loopen loopa igenom varje värde som jag sedan skapa ett kort för de med värde och färg och la det in i decken. Jag la även till lite funktioner för kortleken som till exempel där man kan dra ett kort som är slumpat genom array_rand och sedan tar bort de i kortleken. Jag känner mig ganska nöjd hur kursmomentet blev. Vad för förbättringspotential jag ser är kanske skulle försöka göra koden lite mer enklare med att försöka hålla kontrollerna lite mindre och mer kod i klasserna.</p>
        <p>Jag har inte gjort något flödesdiagram samt psuedokod i detta kursmoment då jag väntar att göra det till nästa kusmoment och väntar då med att besvara frågan om det är något som jag tror stödjer mig i min problemlösnining och tankearbete.</p>
        <p>Mitt TIL för detta kmom är hur man skapar klasser med php och använda mina klasser i min controller. Även har jag lärt mig hur man använder session.</p>

        <h2>Kmom03</h2>
        <p>Att modellera kortspelet från ett flödesdiagram kändes väldigt bra på grund av att när man själv tappar bort sig / att man spåna på något helt annat så kan man gå tillbaka och inse att nej så här ska jag inte göra det utan jag ska försöka hålla det så simpelt som möjligt. Jag tyckte att det var väldigt svårt att skriva pusedokod så det hjälpte inte mig jätte mycket och uppdaterade pusedokoden lite efterhand på grund av att jag hade glömt att ess var antigen 1 eller 11. Men jag försökte följa det så gott jag kunde.</p>
        <p>Mina implementationer från uppgiften var relativt lätta att göra i början där jag använde mig utav deck klassen och card klassen till denna uppgift och sedan gjorde en game klass som använde sig utav dem men också egna funktioner som kollade vem som vann och dra kort till dealern när spelaren stannar. Det blev sedan betydligt mycket svårare att göra implementationerna när jag märkte att jag hade inte alls räknat in att ett ess ”A” kan vara både 1 och 11. Detta gjorde allt betydligt mycket svårare och fick skriva om mycket för att få det att funka. Generellt känner jag mig nöjd med uppgiften att jag fick allt att funka men också missnöjd då jag känner att jag hade kunnat göra bättre kod om jag hade märkt problemet tidigare med esset. Detta ledde till att jag blev förvirrad över allt jag gjorde och fick tänka väldigt mycket hur jag skulle få spelet att funka med att esset var både 1 och 11. Vilka förbättringspotentialer jag ser är att göra koden mindre och inte lika komplicerad som jag fick det till nu. Alltså försöka hålla principen “Keep it simple stupid”. Detta försvann för mig i mitten av uppgiften när jag märkte ess problemet. Jag känner mig ändå ganska nöjd med controllern där jag försökte ha så lite kod som möjligt och kände mig ganska nöjd med att det inte blev så mycket kod.</p>
        <p>Hur jag känner med att koda i ett ramverk som symfony känns fortfarande lite klurigt och svårt men det blir allt lättare till desto mer man arbetar med det. Man börjar känna sig att man har mer kontroll på det man gör och det blir lättare att programmera.</p>
        <p>Mitt TIL för detta kursmoment är hur man skapar mer komplicerade funktioner i klasserna och hur man använder de till sin sida och läran att försöka skriva mindre kod i sin controller och i stället mer i sina klasser.</p>
        <h2>Kmom04</h2>
        <h2>Kmom05</h2>
        <h2>Kmom06</h2>
        <h2>Kmom07 - Kmom10</h2>
    </section>
    {% include "inc/footer.html.twig" %}
</body>