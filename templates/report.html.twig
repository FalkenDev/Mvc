{# templates/report.html.twig #}
{% include "inc/header.html.twig" %}
<body>
    <section class="report">
        <h1>Redovisningstexter för kursens kursmoment</h1>
        <h2>Kmom01</h2>

        <p>Minna tidigare erfarenheter av objektorientering är från kursen OOPython där vi lärde oss
        om att skapa klasser, arv med mer. Jag har även förkunskaper om objektorientering i gymnasiet
        där vi hade 2 programmeringskurser inom C++ i min inriktning.</p>

        <p>De grunderna man behöver veta om PHPs modell för klasser och objekt är att i objekt så finns
        det både mutable och immutable objekt. Med mutable objekt kan man förändra sin struktur under sin
        levnadstid medan inmutable så kan man inte ändra eller ta bort något alltså motsatsen till mutable.
        Man behöver också veta om piloperatorer som gör att man accessar ett objekts properties eller medlemmar.
        Även att alla objekt är publika om man inte inkapslar det med klasser.  </p>

        <p>Grunderna att veta om klasser är att $this är en referns till nuvarande objekt och används i klassens
        metoder för att referera de objekt som anropar metoden. Även behöver man veta om att funktioner som ligger
        som medlemmar i en klass är metoder och att properties variabler i en klass kan man kalla för medlemsvariabler.</p>

        <p>Jag uppfattar den som relativt enkelt när man har lärt sig mer om det. Det var svårt att förstå i början men
        när man fick lite mer klarheter så lättnade de till.</p>

        <p>Några delar jag känner extra intressant i artikeln ”PHP The Right Way” är MySQL extension då vi har arbetat
        med databaser i förra kursen och känner då hade varit kul att veta mer om det. Något mer som jag blev intresserade
        av är Design Patterns. Att lära sig mer om vilka design mönster som är bra att använda för att göra det både lättare
        att kunna hantera sin egen kod men också för andra utvecklare att förstå koden och hantera den när man väll ska jobba
        eller utveckla ett program med någon annan. Exceptions intresserar mig också då detta är väldigt viktigt att lyfta fram
        problem och misstag som man får när man kör sitt program. Att veta mer om detta hade varit kul då detta underlättar vad
        för misstag man gör och kan korrigera dom lättare.</p>

        <p>Mitt TIL för detta kursmoment är hur man skapar template filer såsom med twig även har jag lärt mig mer om hur man skapar Controllers.</p>

        <h2>Kmom02</h2>
        <p>Arv är att den ärver en annans klass saker / beteende men går att modifieras med sina egna funktioner utan att det påverkar klassen som den ärver.</p>
        <p>Interface definierar vad som behöver finnas i funktionen som till exempel rätt namn och typ. Detta gör inte mycket mer än att säga till om man har skrivit något fel eller returnerar fel typ värde</p>
        <p>Trait är typ som arv då den har en relation till någon annan klass men klassen är inte en relation till en annan klass som arv har.  Man kan använda klassens metoder och använda de i sin egen klass utan att det påverkar klassens som ärvs.</p>
        <p>Komposition är att till exempel en klass är beroende av en annan klass. Om den klassen som den andra klassen är beroende utav tas bort så funkar inte klassen.</p>
        <p>Jag försökte hålla det så simpelt som möjligt med mina implementationer. Jag började att göra en klass för kortleken och en klass för varje kort. I kort konstruktorn så gav jag specifika kortet värde och vad för färg det är. I kortlekskonstruktorn skapade jag hela kortleken med att loopa igenom färgen och i den loopen loopa igenom varje värde som jag sedan skapa ett kort för de med värde och färg och la det in i decken. Jag la även till lite funktioner för kortleken som till exempel där man kan dra ett kort som är slumpat genom array_rand och sedan tar bort de i kortleken. Jag känner mig ganska nöjd hur kursmomentet blev. Vad för förbättringspotential jag ser är kanske skulle försöka göra koden lite mer enklare med att försöka hålla kontrollerna lite mindre och mer kod i klasserna.</p>
        <p>Jag har inte gjort något flödesdiagram samt psuedokod i detta kursmoment då jag väntar att göra det till nästa kusmoment och väntar då med att besvara frågan om det är något som jag tror stödjer mig i min problemlösnining och tankearbete.</p>
        <p>Mitt TIL för detta kmom är hur man skapar klasser med php och använda mina klasser i min controller. Även har jag lärt mig hur man använder session.</p>

        <h2>Kmom03</h2>
        <p>Att modellera kortspelet från ett flödesdiagram kändes väldigt bra på grund av att när man själv tappar bort sig / att man spåna på något helt annat så kan man gå tillbaka och inse att nej så här ska jag inte göra det utan jag ska försöka hålla det så simpelt som möjligt. Jag tyckte att det var väldigt svårt att skriva pusedokod så det hjälpte inte mig jätte mycket och uppdaterade pusedokoden lite efterhand på grund av att jag hade glömt att ess var antigen 1 eller 11. Men jag försökte följa det så gott jag kunde.</p>
        <p>Mina implementationer från uppgiften var relativt lätta att göra i början där jag använde mig utav deck klassen och card klassen till denna uppgift och sedan gjorde en game klass som använde sig utav dem men också egna funktioner som kollade vem som vann och dra kort till dealern när spelaren stannar. Det blev sedan betydligt mycket svårare att göra implementationerna när jag märkte att jag hade inte alls räknat in att ett ess ”A” kan vara både 1 och 11. Detta gjorde allt betydligt mycket svårare och fick skriva om mycket för att få det att funka. Generellt känner jag mig nöjd med uppgiften att jag fick allt att funka men också missnöjd då jag känner att jag hade kunnat göra bättre kod om jag hade märkt problemet tidigare med esset. Detta ledde till att jag blev förvirrad över allt jag gjorde och fick tänka väldigt mycket hur jag skulle få spelet att funka med att esset var både 1 och 11. Vilka förbättringspotentialer jag ser är att göra koden mindre och inte lika komplicerad som jag fick det till nu. Alltså försöka hålla principen “Keep it simple stupid”. Detta försvann för mig i mitten av uppgiften när jag märkte ess problemet. Jag känner mig ändå ganska nöjd med controllern där jag försökte ha så lite kod som möjligt och kände mig ganska nöjd med att det inte blev så mycket kod.</p>
        <p>Hur jag känner med att koda i ett ramverk som symfony känns fortfarande lite klurigt och svårt men det blir allt lättare till desto mer man arbetar med det. Man börjar känna sig att man har mer kontroll på det man gör och det blir lättare att programmera.</p>
        <p>Mitt TIL för detta kursmoment är hur man skapar mer komplicerade funktioner i klasserna och hur man använder de till sin sida och läran att försöka skriva mindre kod i sin controller och i stället mer i sina klasser.</p>

        <h2>Kmom04</h2>
        <p>Jag tyckte det var väldigt roligt att skriva tester, att man kunde kolla igen att allt funkar. Jag inser också att detta är bra att skriva efterhand när man jobbar igenom sina kursmoment då om man vill sedan ändra sin kod så kan man upptäcka problemen snabbare. Jag tyckte phpunit var relativt lätt att förstå efter att man har läst dokumentationen. Vi har också gjort tester inom python kursen och man förstod då ganska väl när man arbetade med phpunit.</p>
        <p>I klasserna Deck och Cards så lyckades jag nå 100% på både Lines och Functions and Methods. Men i Blackjack fick jag runt 70%. Det gick väldigt bra att skriva för deck och cards klasserna på grund av att de inte hade lika många funktioner med blackjack hade en del funktioner och kod som behövde testas.</p>
        <p>Jag tycker att min kod är ”testbar kod”. Jag försökte testa alla metoder så gott jag kunde utifrån hur jag satte upp blackjack reglerna på mitt spel.</p>
        <p>Jag valde inte att skriva om delar av min kod speciellt, just för att jag var rädd för att förstöra den då den blev mer komplicerad kod än vad jag tänkte mig från början när jag gjorde kursmoment 3 på grund av poängsystemet som jag märkte av efter halva projektet.</p>
        <p>Jag tror inte testbar kod kan identifiera “snygg och ren kod”. Detta är på grund av att man kan göra komplicerad kod i sina funktioner men fortfarande få ut rätt svar som man vill få ut när man testar. Men på ena sättet så berättar den ändå att metoderna funkar och ger ut rätt om då rätt svar returneras till testet.</p>
        <p>Mitt till för detta kursmoment är att lära sig hur man skriver tester och testa sin kod med phpunit. Även har jag lärt mig hur man dokumenterar sin kod bättre med phpdoc och lärt mig en del i dokumentationen om phpDocumentor.</p>

        <h2>Kmom05</h2>
        <p>Jag fick en del problem i början med övningen. Detta var på grund av att jag hade skrivit fel i mina fält när jag skulle skapa en Entity klass. Detta gjorde att jag sedan fick problem med att börja om från början för att symfony trodde fortfarande att filerna fanns i min mapp när jag egentligen tog bort allt. Detta löste sig sedan med att göra ”composer dump-autoload -o”. Jag fick därefter problem med att köra migration men löste det snabbt efter att jag hittade versionsfilerna som jag hade glömt att ta bort. När allt löste sig så flöt övningen på bra.</p>
        <p>Jag tänkte att jag bygger upp en sida som man kan se böckerna och dess titel och även göra en knapp för att lägga till böcker. Om man klickar på böckerna så ska man kunna se detaljer om boken samt kommer 3 knappar upp om att antingen uppdatera eller ta bort boken eller gå tillbaka till där alla böckerna visas. Jag tyckte det flöt på väldigt bra att arbeta med ORM i CRUD. Det var väldigt roligt att göra samt har vi arbetat på ett snarlikt sätt inom förra webtec kursen samt lite i databas kursen. Så detta kändes inte speciellt svårt samt att det var väldigt intressant att lära sig om detta.</p>
        <p>Jag gjorde inga delar av extrauppgiften då jag kände att jag vill försöka ligga i fas med kursen och i stället kanske göra något sådant efter kursens gång.</p>
        <p>Min uppfattning om ORM är att det är ett sorts samlingsnamn om mappning av objekt till databasen. Där till exempel ORM har många lager såsom query builder och active record implementation. ORM känns väldigt lätt att använda utan att man behöver stora kunskaper om databaser som man behöver i exempelvis SQL eller PHP PDO men det är ändå en del läran om nya saker när man använder ORM på grund av att det är mer objektorienterad än till exempel SQL eller PHP PDO. Även att ORM döljer mer databasen medan SQL skriver man mer tabeller och kolumner.</p>
        <p>Mitt TIL för detta kursmoment är hur man jobbar / använder sig utav ORM och hur man implementerar det i ramverket symfony.</p>

        <h2>Kmom06</h2>
        <p>Jag uppfattade phpmetrics som något bra man kan kolla på för att få statistik hur sin kod är. Jag tyckte att kolla på sidan ”Violations” och ”Coupling” var lite mer väderfulla då man fick man en inblick vilka klasser som är viktiga att fixa och vilka klasser just den klassen påverkar / vilka klassen som påverkar den klassen. Om man ska jämföra med till exempel Scrutinizer så visar scrutinizer lite mer på vad just problemet är medans phpmetrics ger en övergripande inblick.</p>
        <p>Att integrera med Scrutinizer gick väldigt bra. Min första känsla med Scrutinizer var ”kaos”. Det var svårt att förstå och hitta allt man sökte efter, men när man kom i gång med det så älskar jag det. Det hjälper en så mycket med sin kod. Man lär sig vad som är dålig kod och kan skriva bättre kod. Även ser man fel som man inte såg själv som scrutinizer visar. Jag minns inte helt vad min kodtäckning samt kodkvalitet overall visade efter första bygget men i blackjack klassen hade jag kodtäckning på 65,85% och betyg B. Men eter jag fixade mina metoder samt gjorde några tester så fick jag 93,22% och betyg A.</p>
        <p>Jag tror man kan påvisa till en viss del med kodkvalitet då det beskriver ungefär hur bra man har gjort det. Men det finns också många delar där man inte kan påvisa kodkvalitet då koden behöver kanske vara så komplex för att det ska funka eller att man kanske har mycket afferent couplings. Men med detta kan man ju förklara varför inte det visar så bra status på till exempel badgeserna. Min syn på kodkvalitet är bra att man har till exempel badges / förklarar hur bra en kod / klass är, det spelar ingen roll om man får dåligt men man lär sig varje dag att skriva bättre kod. Att få kritik är alltid bra till viss mån då man tar till sig det och ändrar sitt sätt att skriva kod till bättre och man lär sig vad det är man gör fel.</p>
        <p>Mitt TIL för detta kursmoment är hur man använder phpmetrics och scrutinizer samt läran hur man kan jobba aktivt med kodkvalitet.</p>

        <h2>Kmom07 - Kmom10</h2>
    </section>
    {% include "inc/footer.html.twig" %}
</body>